// Generated by CoffeeScript 1.6.3
var ShapeFile, buildScript, database, earth, fs, geoip, hostname, minify, port, round, sf;

fs = require('fs');

geoip = require('geoip-lite');

ShapeFile = require('node-shapelib-partial').ShapeFile;

database = require('./database');

minify = require('minify');

hostname = process.env.WEBSOCKET_HOSTNAME || 'localhost';

port = process.env.WEBSOCKET_PORT || 3003;

module.exports = function(opts, callback) {
  var ip, randomIP, v;
  if (opts.path !== '/') {
    return callback(null, {
      statusCode: 404
    });
  }
  randomIP = function() {
    var random;
    random = function() {
      return Math.floor(Math.random() * 254);
    };
    return "" + (random()) + "." + (random()) + "." + (random()) + "." + (random());
  };
  ip = opts.headers['x-real-ip'];
  if (process.env.NODE_ENV !== 'production') {
    ip || (ip = randomIP());
  }
  v = new database.Visitor({
    location: geoip.lookup(ip)
  });
  return v.save(function(err, visitor) {
    if (err != null) {
      return callback(null, 'error');
    }
    return callback(null, {
      headers: {
        'Content-Type': 'text/html'
      },
      body: "<body>\n    <script src=\"build\"></script>\n    <script src=\"client?id=" + visitor.id + "&hostname=" + hostname + "&port=" + port + "\"></script>\n</body>"
    });
  });
};

module.exports.client = function(opts, callback) {
  var id;
  id = opts.query.id;
  hostname = opts.query.hostname;
  port = opts.query.port;
  return callback(null, {
    headers: {
      'Content-Type': 'text/javascript'
    },
    body: "(\n" + (require('./client').toString()) + "\n).call(self, '" + id + "', '" + hostname + "', " + port + ");"
  });
};

buildScript = void 0;

if (process.env.NODE_ENV === 'production') {
  minify.optimize(__dirname + '/../build/build.js', {
    callback: function(data) {
      return buildScript = data;
    }
  });
} else {
  buildScript = "" + (fs.readFileSync(__dirname + '/../build/build.js').toString()) + "\n//\n// TODO: fix something (is chopping the last few chars off the build script delivery)\n//";
}

module.exports.build = function(opts, callback) {
  var respond;
  respond = function() {
    if (buildScript == null) {
      return setTimeout(respond, 1000);
    }
    return callback(null, {
      headers: {
        'Content-Type': 'text/javascript'
      },
      body: buildScript
    });
  };
  return respond();
};

module.exports.visitors = function(opts, callback) {
  var id;
  id = opts.query.id;
  return database.Visitor.find().exec(function(err, result) {
    return callback(null, result.map(function(v) {
      return {
        me: id === v.id,
        country: v.location.country,
        region: v.location.region,
        city: v.location.city,
        ll: v.location.ll
      };
    }));
  });
};

round = function(value) {
  return Math.floor(value * 10) / 10;
};

earth = void 0;

sf = new ShapeFile;

sf.open('data/ne_50m_land', function(err, res) {
  return earth = res.shapes.map(function(shape) {
    return shape.vertices.map(function(vertex) {
      var lat, lon;
      lat = round(vertex[0]);
      lon = round(vertex[1]);
      return [lat, lon];
    });
  });
});

module.exports.earth = function(opts, callback) {
  return callback(null, earth);
};

module.exports.$www = {};

module.exports.visitors.$www = {};

module.exports.earth.$www = {};

module.exports.build.$www = {
  cache: true
};

module.exports.client.$www = {
  cache: true
};
