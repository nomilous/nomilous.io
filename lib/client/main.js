// Generated by CoffeeScript 1.6.3
require(['/js/q.min.js', '/js/three.min.js', '/js/stats.min.js'], function(Q) {
  var animate, aspect, camera, canvas, far, fov, getResource, height, near, renderer, scene, stats, width;
  stats = new Stats;
  stats.setMode(0);
  stats.domElement.style.position = 'absolute';
  stats.domElement.style.left = '0px';
  stats.domElement.style.top = '0px';
  document.body.appendChild(stats.domElement);
  width = 800;
  height = 600;
  fov = 65;
  aspect = width / height;
  near = 0.1;
  far = 2000;
  renderer = new THREE.WebGLRenderer({
    antialias: true,
    alpha: false
  });
  camera = new THREE.PerspectiveCamera(fov, aspect, near, far);
  scene = new THREE.Scene;
  scene.add(camera);
  camera.position.z = 750;
  scene.fog = new THREE.FogExp2(0x251d15, 0.0018);
  renderer.setSize(width, height);
  renderer.setClearColor(0x050505, 1);
  canvas = renderer.domElement;
  document.body.appendChild(canvas);
  canvas.style.width = '100%';
  canvas.style.height = '100%';
  getResource = function(url) {
    return Q.Promise(function(resolve, reject, notify) {
      var req;
      req = new XMLHttpRequest();
      req.onload = function(event) {
        if (req.status !== 200) {
          return reject(new Error('failed to load ' + url));
        }
      };
      req.onerror = function(event) {
        return reject(new Error('failed to load ' + url));
      };
      req.onprogress = function(event) {
        if (event.lengthComputable) {
          return notify({
            progress: [event.loaded, event.total]
          });
        }
      };
      req.onreadystatechange = function(event) {
        if (req.readyState === 4) {
          return resolve(JSON.parse(req.responseText));
        }
      };
      req.open('GET', url, true);
      return req.send();
    });
  };
  Q.all(['/earth', '/visitors'].map(function(url) {
    return getResource(url);
  })).then(function(_arg) {
    var earth, visitors;
    earth = _arg[0], visitors = _arg[1];
    return console.log(visitors);
  }, function(error) {}, function(notify) {});
  animate = function() {
    stats.begin();
    try {
      requestAnimationFrame(animate);
    } catch (_error) {}
    return stats.end();
  };
  return animate();
});
